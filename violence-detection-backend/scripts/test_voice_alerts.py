# scripts/test_voice_alerts.py - Script para probar alertas de voz

"""
Script de prueba para el sistema de alertas de voz - ACTUALIZADO SIN VERIFICACI√ìN DE CR√âDITOS
"""
import asyncio
import os
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# *** AGREGAR: Cargar variables de entorno desde .env ***
from dotenv import load_dotenv
load_dotenv(root_dir / ".env")

from app.services.voice_alert_service import ServicioAlertasVoz
from app.config import configuracion


async def probar_alertas_voz():
    """Prueba completa del sistema de alertas de voz - SIN VERIFICACI√ìN DE CR√âDITOS"""
    print("üéôÔ∏è Iniciando pruebas del sistema de alertas de voz...")
    
    # Crear instancia del servicio
    servicio = ServicioAlertasVoz()
    
    # Verificar estado inicial
    estado = servicio.obtener_estado()
    print(f"\nüìä Estado inicial del servicio:")
    for key, value in estado.items():
        print(f"   - {key}: {value}")
    
    if not servicio.habilitado:
        print("\n‚ùå El servicio de alertas de voz no est√° habilitado.")
        print("   Verifica que ELEVENLABS_API_KEY est√© configurada en el archivo .env")
        return
    
    print(f"\n‚úÖ Servicio habilitado. Iniciando pruebas...")
    
    # Prueba 1: Alerta b√°sica (SIN verificaci√≥n de cr√©ditos)
    print(f"\nüß™ Prueba 1: Alerta b√°sica (sin verificaci√≥n de cr√©ditos)")
    success = await servicio.emitir_alerta_violencia(
        ubicacion="Patio Principal",
        probabilidad=0.85,
        personas_detectadas=2
    )
    print(f"   Resultado: {'‚úÖ Exitosa' if success else '‚ùå Fall√≥'}")
    
    # Esperar un poco
    await asyncio.sleep(3)
    
    # Prueba 2: Alerta cr√≠tica
    print(f"\nüß™ Prueba 2: Alerta cr√≠tica (alta probabilidad)")
    success = await servicio.emitir_alerta_violencia(
        ubicacion="Aula 201",
        probabilidad=0.95,
        personas_detectadas=3,
        forzar=True  # Forzar para ignorar cooldown
    )
    print(f"   Resultado: {'‚úÖ Exitosa' if success else '‚ùå Fall√≥'}")
    
    # Esperar un poco
    await asyncio.sleep(3)
    
    # Prueba 3: Alerta con cooldown
    print(f"\nüß™ Prueba 3: Alerta con cooldown (deber√≠a fallar)")
    success = await servicio.emitir_alerta_violencia(
        ubicacion="Cafeter√≠a",
        probabilidad=0.75,
        personas_detectadas=1
    )
    print(f"   Resultado: {'‚úÖ Exitosa' if success else '‚ùå Fall√≥ (esperado por cooldown)'}")
    
    # Prueba 4: Configurar cooldown
    print(f"\nüß™ Prueba 4: Configurar cooldown corto")
    servicio.configurar_cooldown(5)  # 5 segundos
    estado_nuevo = servicio.obtener_estado()
    print(f"   Cooldown configurado a: {estado_nuevo['cooldown_segundos']}s")
    
    # Esperar y probar nuevamente
    print(f"   Esperando 6 segundos...")
    await asyncio.sleep(6)
    
    success = await servicio.emitir_alerta_violencia(
        ubicacion="Biblioteca",
        probabilidad=0.80,
        personas_detectadas=2
    )
    print(f"   Resultado despu√©s del cooldown: {'‚úÖ Exitosa' if success else '‚ùå Fall√≥'}")
    
    # Estado final
    estado_final = servicio.obtener_estado()
    print(f"\nüìä Estado final del servicio:")
    for key, value in estado_final.items():
        print(f"   - {key}: {value}")
    
    # Limpiar recursos
    servicio.cerrar()
    print(f"\n‚úÖ Pruebas completadas. Servicio cerrado.")


async def probar_configuracion():
    """Prueba la configuraci√≥n del sistema"""
    print("‚öôÔ∏è Verificando configuraci√≥n del sistema de alertas de voz...")
    
    # Verificar variables de entorno
    api_key = os.getenv('ELEVENLABS_API_KEY')
    print(f"   ELEVENLABS_API_KEY: {'‚úÖ Configurada' if api_key else '‚ùå No configurada'}")
    
    if api_key:
        print(f"   API Key (primeros 10 chars): {api_key[:10]}...")
    
    # *** AGREGAR: Debug de configuraci√≥n ***
    print(f"   Configuraci√≥n desde config.py: {'‚úÖ Disponible' if hasattr(configuracion, 'ELEVENLABS_API_KEY') and configuracion.ELEVENLABS_API_KEY else '‚ùå No disponible'}")
    
    # Verificar dependencias
    dependencias = {
        'elevenlabs': False,
        'sounddevice': False,
        'numpy': False,
        'scipy': False
    }
    
    for dep in dependencias:
        try:
            __import__(dep)
            dependencias[dep] = True
        except ImportError:
            pass
    
    print(f"\nüì¶ Dependencias:")
    for dep, disponible in dependencias.items():
        print(f"   - {dep}: {'‚úÖ Disponible' if disponible else '‚ùå No disponible'}")
    
    # Verificar dispositivos de audio
    try:
        import sounddevice as sd
        devices = sd.query_devices()
        print(f"\nüîä Dispositivos de audio encontrados: {len(devices)}")
        
        # Mostrar dispositivo por defecto
        default_device = sd.default.device
        print(f"   Dispositivo por defecto: {default_device}")
    except Exception as e:
        print(f"\n‚ùå Error verificando dispositivos de audio: {e}")
    
    return all(dependencias.values()) and api_key is not None


async def main():
    """Funci√≥n principal"""
    print("üéØ Sistema de Pruebas - Alertas de Voz (SIN verificaci√≥n de cr√©ditos)")
    print("=" * 70)
    
    # *** AGREGAR: Verificar que se carg√≥ el .env ***
    print(f"üìÅ Archivo .env cargado desde: {root_dir / '.env'}")
    print(f"üîë Variables cargadas: {len([k for k in os.environ.keys() if k.startswith(('ELEVENLABS', 'VOICE'))])} relacionadas con voz")
    
    # Verificar configuraci√≥n primero
    config_ok = await probar_configuracion()
    
    if not config_ok:
        print(f"\n‚ùå La configuraci√≥n no es correcta. Instala las dependencias faltantes:")
        print("   pip install elevenlabs sounddevice scipy")
        print("   Y configura ELEVENLABS_API_KEY en el archivo .env")
        return
    
    print(f"\n‚úÖ Configuraci√≥n verificada. Procediendo con las pruebas...")
    
    # Ejecutar pruebas
    await probar_alertas_voz()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n‚è∏Ô∏è Pruebas interrumpidas por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()